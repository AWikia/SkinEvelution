/* Mobile Only CSS */
if (navigator.userAgent.match("Mobile")) {
document.querySelector("body").className += " phone"
}

/* Local Storage */
function getKey(key) {
var str = window.localStorage,
    result = str.getItem('-evelution-pref-'+key);
if (!result) {
   return '-1';
}
return result;
}

function insertKey(key,value) {
	window.localStorage.setItem('-evelution-pref-' + key, '' + value);
}

function getParams() {
	if (window.location.search != "") {
		var params = window.location.search.split("?")[1].split("&");
    } else {
		var params = []
    }
	return params
}


/* Dropdowns */
// Calls the function on all toggles
function DropDownUpdate() {
	var dropdowns = document.querySelectorAll(".cpe-dropdown");
	dropdowns.forEach(function(x) {
		x.setAttribute('tabindex',-1);; // Add the CPE button class
	});


/* Select Inputs */
	var select_items = document.querySelectorAll(".cpe-dropdown.cpe-select .cpe-dropdown__content .cpe-list li:not(.cpe-dropdown-level-2)");
	select_items.forEach(function(y) {
		y.setAttribute('onclick','UpdateSelectValue()')
		y.addEventListener('click', (function(e) {
						e.preventDefault();
						var selected = this;


		var x = document.querySelector(".cpe-dropdown.cpe-select:focus-within .cpe-dropdown__content .cpe-list li.selected");
		if (x) {
			x.classList.remove("selected");
		}
//		this.classList.add("selected");


						var value = selected.getAttribute("value");
						document.querySelector(' .cpe-dropdown.cpe-select:focus-within')
						.addEventListener('click',(function() {
									var content = selected.innerText;
									document.querySelector('.cpe-select:focus-within .cpe-select__value').setAttribute("value", value);
									document.querySelector('.cpe-select:focus-within .cpe-select__value').innerHTML= content;
//									TestDynamicTheme(); // Change
								}));
        }) );
	});

					
}

function UpdateSelectValue() { // Handles Blurring
		setTimeout(
		(function() { document.querySelector(' .cpe-dropdown.cpe-select:focus-within').blur() } )
	,0)
}


function UpdateRange() {
	var ranges = document.querySelectorAll('input[type="range"]');
	ranges.forEach(function(x) {
		x.style.setProperty("--range-percent",  (((x.value) * 100) / x.getAttribute('max')) + '%' );
	});

}

function UpdateRangeInputs() {
	UpdateRange();

	var ranges2 = document.querySelectorAll('input[type="range"]');
	ranges2.forEach(function(x) {
		x.addEventListener("input", function(e) { UpdateRange(); });
	});

}

/* Enable New Global Navigation - No exception for now */
(function () {
	AliasFandomComponents();
	if (getKey('content-full') === '-1') {
		insertKey('content-full', 'false' );
	}
	if (getKey('toolbar-full') === '-1') {
		insertKey('toolbar-full', 'true' );
	}
	if (getKey('nav-full') === '-1') {
		insertKey('nav-full', 'true' );
	}
	if (getKey('right-rail-full') === '-1') {
		insertKey('right-rail-full', 'true' );
	}
	if (getKey('left-rail-full') === '-1') {
		insertKey('left-rail-full', 'true' );
	}
	var content_full = getKey('content-full')
	var toolbar_full = getKey('toolbar-full');
	var nav_full = getKey('nav-full');
	var right_rail_full = getKey('right-rail-full');
	var left_rail_full = getKey('left-rail-full');
    getParams().forEach(function (param) {
        var key = param.split("=")[0];
        var value = param.split("=")[1];

        switch (key) {
            case 'fullwidth':
				content_full = (value === 'true');
				console.info('Article width settings overriden')
                break;
            case 'hidetoolbar':
				toolbar_full = (value === 'false');
				console.info('Toolbar visibility settings overriden')
                break;
            case 'hidenavbar':
				nav_full = (value === 'false');
				console.info('Sticky navigation visibility settings overriden')
                break;
            case 'hiderail':
				right_rail_full = (value === 'false');
				left_rail_full = (value === 'false');
				console.info('Pane visibility settings overriden')
                break;
            case 'hiderightrail':
				right_rail_full = (value === 'false');
				console.info('Right pane visibility settings overriden')
                break;
            case 'hideleftrail':
				left_rail_full = (value === 'false');
				console.info('Left pane visibility settings overriden')
                break;

        }
    });
	document.querySelector(' container ').setAttribute('wide', content_full );
	document.querySelector(' container ').setAttribute('toolbar', toolbar_full );
	document.querySelector(' container ').setAttribute('nav', nav_full );
	document.querySelector(' container ').setAttribute('right-rail', right_rail_full );
	document.querySelector(' container ').setAttribute('left-rail', left_rail_full );
	UpdateRangeInputs();
	DropDownUpdate();
})();


/* Aliases all components with the .wds prefix to the ones from .cpe ones */
function AliasFandomComponents() {

	var highlightedItems = document.querySelectorAll(":not(svg)[class*='wds-'], [class*='cpe-is-'], [class*='cpe-has-']");

	while (document.querySelectorAll(':not(svg)[class*="wds-"], [class*="cpe-is-"], [class*="cpe-has-"]').length > 0) {
		highlightedItems.forEach(function(x) {
			x.className = x.className.replace("wds-is-", "is-");
			x.className = x.className.replace("wds-has-", "has-");
			x.className = x.className.replace("cpe-is-", "is-");
			x.className = x.className.replace("cpe-has-", "has-");
			x.className = x.className.replace("wds-midlight-aqua", "cpe-midlight-color");
			x.className = x.className.replace("wds-", "cpe-");
		});
	}


}



/* Banners */
function RemoveBanner() {
		var banner= document.querySelector('#floatingbanner .cpe-banner-notification:focus-within');
		banner.classList.add("is-transparent")
		setTimeout(
		(function () {
			banner.remove();			
			if (!(document.querySelectorAll("#floatingbanner .cpe-banner-notification").length)) {
				document.querySelector('#floatingbanner').remove();
			}
			document.querySelector('body').focus();
		}),405);
	

}

function AddFloatingBanner(content='Sample Content',kind='message',extraclass='') {
	if (kind === 'warning') {
		var icon = 'report_problem'
	} else if (kind === 'alert') {
		var icon = 'report'
	} else if (kind === 'success') {
		var icon = 'done'
	} else {
		var icon = 'info'
	}
	if (!(document.querySelector(".top-gap #floatingbanner"))) {
		document.querySelector(".top-gap").insertAdjacentHTML('afterbegin', 
			  '<div class="cpe-banner-notification__container" id="floatingbanner">' +
			  '\n</div>'
		);
	}

	document.querySelector(".top-gap #floatingbanner").insertAdjacentHTML('beforeend', 
			'<div class=" cpe-banner-notification cpe-' + kind + '" id="' + extraclass  + '">' +
			  '<div class="cpe-banner-notification__icon">' +
				'<span class="cpe-icon cpe-icon-small material-icons">' +
					icon + 
				'</span>' +
			  '</div>' +
			  '<span class="cpe-banner-notification__text">' + content + '</span>' +
			  '<span tabindex="-1" onclick="RemoveBanner()" class="cpe-banner-notification__close">' +
				'<span class="cpe-icon cpe-icon-tiny cpe-icon-large material-icons">close</span>' +
			  '</span>' +
			'</div>' 
	);


}

/* File Downloader */
/*! @source http://purl.eligrey.com/github/FileSaver.js/blob/master/FileSaver.js */
var saveAs=saveAs||function(e){"use strict";if(typeof e==="undefined"||typeof navigator!=="undefined"&&/MSIE [1-9]\./.test(navigator.userAgent)){return}var t=e.document,n=function(){return e.URL||e.webkitURL||e},r=t.createElementNS("http://www.w3.org/1999/xhtml","a"),o="download"in r,a=function(e){var t=new MouseEvent("click");e.dispatchEvent(t)},i=/constructor/i.test(e.HTMLElement)||e.safari,f=/CriOS\/[\d]+/.test(navigator.userAgent),u=function(t){(e.setImmediate||e.setTimeout)(function(){throw t},0)},s="application/octet-stream",d=1e3*40,c=function(e){var t=function(){if(typeof e==="string"){n().revokeObjectURL(e)}else{e.remove()}};setTimeout(t,d)},l=function(e,t,n){t=[].concat(t);var r=t.length;while(r--){var o=e["on"+t[r]];if(typeof o==="function"){try{o.call(e,n||e)}catch(a){u(a)}}}},p=function(e){if(/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(e.type)){return new Blob([String.fromCharCode(65279),e],{type:e.type})}return e},v=function(t,u,d){if(!d){t=p(t)}var v=this,w=t.type,m=w===s,y,h=function(){l(v,"writestart progress write writeend".split(" "))},S=function(){if((f||m&&i)&&e.FileReader){var r=new FileReader;r.onloadend=function(){var t=f?r.result:r.result.replace(/^data:[^;]*;/,"data:attachment/file;");var n=e.open(t,"_blank");if(!n)e.location.href=t;t=undefined;v.readyState=v.DONE;h()};r.readAsDataURL(t);v.readyState=v.INIT;return}if(!y){y=n().createObjectURL(t)}if(m){e.location.href=y}else{var o=e.open(y,"_blank");if(!o){e.location.href=y}}v.readyState=v.DONE;h();c(y)};v.readyState=v.INIT;if(o){y=n().createObjectURL(t);setTimeout(function(){r.href=y;r.download=u;a(r);h();c(y);v.readyState=v.DONE});return}S()},w=v.prototype,m=function(e,t,n){return new v(e,t||e.name||"download",n)};if(typeof navigator!=="undefined"&&navigator.msSaveOrOpenBlob){return function(e,t,n){t=t||e.name||"download";if(!n){e=p(e)}return navigator.msSaveOrOpenBlob(e,t)}}w.abort=function(){};w.readyState=w.INIT=0;w.WRITING=1;w.DONE=2;w.error=w.onwritestart=w.onprogress=w.onwrite=w.onabort=w.onerror=w.onwriteend=null;return m}(typeof self!=="undefined"&&self||typeof window!=="undefined"&&window||this.content);if(typeof module!=="undefined"&&module.exports){module.exports.saveAs=saveAs}else if(typeof define!=="undefined"&&define!==null&&define.amd!==null){define("FileSaver.js",function(){return saveAs})}

/* Save File */
 function saveFileAs(contents,fileType,fileName) {
    /** Allow for downloading a file to a disk.
        This relies the FileSaver.js library which exports saveAs()
        Two utility methods saveImageAs and saveXMLAs should be used first.
    */
    var blobIsSupported = false,
        fileExt,
        dialog;

    // fileType is a <kind>/<ext>;<charset> format.
    fileExt = fileType.split('/')[1].split(';')[0];
    // handle text/plain as a .txt file
    fileExt = '.' + (fileExt === 'plain' ? 'txt' : fileExt);

    function dataURItoBlob(text, mimeType) {
        var i,
            data = text,
            components = text.split(','),
            hasTypeStr = text.indexOf('data:') === 0;
        // Convert to binary data, in format Blob() can use.
        if (hasTypeStr && components[0].indexOf('base64') > -1) {
            text = atob(components[1]);
            data = new Uint8Array(text.length);
            i = text.length;
            while (i--) {
                data[i] = text.charCodeAt(i);
            }
        } else if (hasTypeStr) {
            // not base64 encoded
            text = text.replace(/^data:image\/.*?, */, '');
            data = new Uint8Array(text.length);
            i = text.length;
            while (i--) {
                data[i] = text.charCodeAt(i);
            }
        }
        return new Blob([data], {type: mimeType });
    }

    try {
        blobIsSupported = !!new Blob();
    } catch (e) {}

    if (blobIsSupported) {
        if (!(contents instanceof Blob)) {
            contents = dataURItoBlob(contents, fileType);
        }
        // download a file and delegate to FileSaver
        // false: Do not preprend a BOM to the file.
        saveAs(contents, fileName + fileExt, false);
    } else {
        prompt("Could not export" + fileName);
    }
 }
 
 /* Download Data */
function DownloadData(contents,filename,ext) {
eval("saveFileAs(contents,\'text/"+ext+";charset=utf-8\', filename)");
}


/* Evelution Specific JS */

(function () {

var amodule = document.querySelector(".evelution-rail-wrapper .activity-module.evelution-module")
if  (amodule)  {
	var amodule2 = document.querySelector(".evelution-rail-wrapper .activity-module.evelution-module .evelution-module-content")
	var oldc = amodule2.innerText;
	amodule2.innerHTML =  oldc ;
}


var imodule = document.querySelector(".evelution-rail-wrapper .info-module.evelution-module")
if  (imodule)  {
	var imodule2 = document.querySelector(".evelution-rail-wrapper .info-module.evelution-module .evelution-module-content")
	var oldc2 = imodule2.innerText;
	imodule2.innerHTML =  oldc2 ;
}



/* Only used in one place */
	var parser = document.querySelector('.raw-parser');
	if (parser) {
		var c = parser.innerText;
		parser.innerHTML=  c;
		parser.classList.remove('raw-parser')
		parser.classList.add('raw-parser-done');
	}
/* Avatar */
	var avatar = document.querySelector('.evelution-navigation .mw-socialprofile-avatar');
	if (avatar) {
		avatar.classList.add('cpe-icon');
		avatar.classList.add('cpe-avatar');
	}

initializeViews();
RemoveEmptyMenus();

		var body_classes = document.querySelector('body').getAttribute('class').split(' ');
		for (let i = 0; i < body_classes.length; i++) {
			document.querySelector('html').classList.add("config-" + body_classes[i]);
		}

	/* DITTO */
	document.querySelector("body").addEventListener("mouseenter", ( function(e) { CheckTheme(); } ) );
	document.querySelector("body").addEventListener("mouseleave", ( function(e) { DropDownUpdate(); CheckTheme(); } ) );
		

	/* END DITTO */

})();


/* Width Toggler */
function ToggleWidth() {
	if 	(document.querySelector(' container ').getAttribute('wide') == 'true') {
		document.querySelector(' container ').setAttribute('wide', 'false');
	} else {
		document.querySelector(' container ').setAttribute('wide', 'true');
	}
	insertKey('content-full', document.querySelector(' container ').getAttribute('wide') );
}

function ToggleBar() {
	if 	(document.querySelector(' container ').getAttribute('toolbar') == 'true') {
		document.querySelector(' container ').setAttribute('toolbar', 'false');
	} else {
		document.querySelector(' container ').setAttribute('toolbar', 'true');
	}
	insertKey('toolbar-full', document.querySelector(' container ').getAttribute('toolbar') );
}


function ToggleNav() {
	if 	(document.querySelector(' container ').getAttribute('nav') == 'true') {
		document.querySelector(' container ').setAttribute('nav', 'false');
	} else {
		document.querySelector(' container ').setAttribute('nav', 'true');
	}
	insertKey('nav-full', document.querySelector(' container ').getAttribute('nav') );
}

function ToggleRail() {
	if 	(document.querySelector(' container ').getAttribute('right-rail') == 'true') {
		document.querySelector(' container ').setAttribute('right-rail', 'false');
	} else {
		document.querySelector(' container ').setAttribute('right-rail', 'true');
	}
	insertKey('right-rail-full', document.querySelector(' container ').getAttribute('right-rail') );
}

function ToggleRail2() {
	if 	(document.querySelector(' container ').getAttribute('left-rail') == 'true') {
		document.querySelector(' container ').setAttribute('left-rail', 'false');
	} else {
		document.querySelector(' container ').setAttribute('left-rail', 'true');
	}
	insertKey('left-rail-full', document.querySelector(' container ').getAttribute('left-rail') );
}




function initializeViews() {

	var va = document.querySelectorAll(".evelution-page-header-contribution .actions > li > a, .evelution-page-header-contribution .views > li > a");
	
		va.forEach(function(x) {
			x.classList.add('cpe-button');
			x.classList.add('is-tertiary');	
			x.setAttribute('has-icon','true');; // Add the CPE button class
		});

	
	

}

function RemoveEmptyMenus() {
// Remove Miraheze elements
	var miraheze = document.querySelector("#footer-icons img[alt='Miraheze Wiki Hosting'], #footer-icons img[alt='Hosted by Miraheze']")
	if (miraheze) { // Check if an image with the Miraheze Wiki hosting alt exists
		document.querySelector('html').classList.add('miraheze-wiki-hosting')
	}
	document.querySelector('html').classList.remove("client-dark-mode");
	
	
// Remove the Language Dropdown, if no languages exist

	if (! (document.querySelector(".evelution-navigation.evelution-sidebar .language-menu .cpe-dropdown__content .cpe-list")) ) {
		var langmenu = document.querySelector(".evelution-navigation.evelution-sidebar .language-menu");
		if (langmenu) {
			langmenu.remove();
		}
	}

// Remove the Language Variants Dropdown, if no language variants exist
	
	if (! (document.querySelector(".evelution-navigation.evelution-sidebar .variants-menu .cpe-dropdown__content .cpe-list > li")) ) {
		var langmenu3 = document.querySelector(".evelution-navigation.evelution-sidebar .variants-menu");
		if (langmenu3) {
			langmenu3.remove();
		}
	}

// Remove duplicated Notices and Updates Dropdown

	var langmenu4N = document.querySelector(".evelution-navigation.evelution-sidebar .link.notices-menu #pt-notifications-notice");
	var langmenu4bN = document.querySelector(".evelution-navigation.evelution-sidebar .link.updates-menu #pt-notifications-alert");
		if (langmenu4N) {
			langmenu4N.remove();	
		}
		if (langmenu4bN) {
			langmenu4bN.remove();
		}

// Remove Notices and Updates Links, if none of them exist


	if (! (document.querySelector(".evelution-navigation.evelution-sidebar .link.notices-menu .cpe-list > #pt-notifications-alert")) ) {
		var langmenu4 = document.querySelector(".evelution-navigation.evelution-sidebar .link.notices-menu");
		if (langmenu4) {
			langmenu4.remove();
		}
	}

	if (! (document.querySelector(".evelution-navigation.evelution-sidebar .link.updates-menu .cpe-list > #pt-notifications-notice")) ) {
		var langmenu4b = document.querySelector(".evelution-navigation.evelution-sidebar .link.updates-menu");
		if (langmenu4b) {
			langmenu4b.remove();
		}
	}


	if (! (document.querySelector(".evelution-page-header .more-actions-menu .cpe-dropdown__content .cpe-list > li")) ) {
		var langmenu2 = document.querySelector(".evelution-page-header .more-actions-menu");
		if (langmenu2) {
			langmenu2.remove();
		}
	}
	
	
	toc = document.querySelector(".toc#toc > ul");
	if (toc) {
		document.querySelector(".evelution-floating-actions .ftoc .cpe-dropdown__content > .toc > .cpe-list").innerHTML = toc.innerHTML
		document.querySelector(".evelution-rail-wrapper .toc-module .evelution-module-content > .toc > .toc").innerHTML = toc.innerHTML
	} else {
		var toc2 = document.querySelector(".evelution-floating-actions .ftoc")
		if (toc2) {
			toc2.remove();
		}
	}


	tools = document.querySelector("#p-tb .mw-portlet-body .cpe-list");
	if (tools) {
		document.querySelector(".evelution-module.tools-module ul").innerHTML = tools.innerHTML
	}

	
	if (! (document.querySelector(".evelution-page-header #ca-edit")) ) {
		var elink = document.querySelector(".evelution-taskbar .link.edit");
		if (elink) {
			elink.remove();
		}
	}
	if (! (document.querySelector(".evelution-page-header #ca-history")) ) {
		var hlink = document.querySelector(".evelution-taskbar .link.history");
		if (hlink) {
			hlink.remove();
		}
	}





}